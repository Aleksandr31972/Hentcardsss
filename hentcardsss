import telebot
import random
from telebot import types
from datetime import datetime, timedelta

bot = telebot.TeleBot('6694236697:AAGiGT92Tmo87rm-eROFptM-BdQL0Uy32O8')


def create_users_table():
    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cards (
            id INTEGER PRIMARY KEY,
            userId INTEGER,
            FOREIGN KEY (userId) REFERENCES users (id)
        )
    ''')
    conn.commit()
    conn.close()


def user_exists(user_id):
    conn = sqlite3.connect("mydatabase.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0


def insert_user(user_id, username, first_name, last_name):
    if not user_exists(user_id):
        conn = sqlite3.connect("mydatabase.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                       (user_id, username, first_name, last_name))
        conn.commit()
        conn.close()
        print(f"–ß–µ–ª —Å user_id {user_id} –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ")
    else:
        print(f"–ß–µ–ª —Å user_id {user_id} –µ—Å—Ç—å —Ç–∞–∫–æ–π")


@bot.message_handler(commands=['start'])
def handle_start(message):
    user = message.from_user
    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name

    insert_user(user_id, username, first_name, last_name)

    bot.send_message(message.chat.id, f"üíû–ì–æ—Å–ø–æ–¥–∏–Ω {user.first_name}! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—é")


@bot.message_handler(func=lambda message: message.text.lower() == '–º–µ–Ω—é')
def handle_menu(message):
    user = message.from_user
    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name

    insert_user(user_id, username, first_name, last_name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üí¶–ü–æ–ª—É—á–∏—Ç—å –¥–µ–≤–æ—á–∫—É")
    markup.add(button)

    bot.send_message(message.chat.id, "üíû–•–æ–∑—è–∏–Ω, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?", reply_markup=markup)


def get_card_info(card_name):
    card_info = {
        '–Ø–º–∞—Ç–æ': {
            'name': '–Ø–º–∞—Ç–æ',
            'rarity': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è',
            'orgasm_power': 10000,
            'stamina': 19000,
            'value': 15000
        },
        '–õ—É—Ñ—Ñ–∏': {
            'name': '–õ—É—Ñ—Ñ–∏',
            'rarity': '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è',  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è
            'orgasm_power': 17000,   # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 17000
            'stamina': 19000,        # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 19000
            'value': 27600            # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 27600
        }
    }

    return card_info.get(card_name, None)


cooldown_time = timedelta(seconds=60)
user_cooldowns = {}


@bot.message_handler(func=lambda message: message.text == 'üí¶–ü–æ–ª—É—á–∏—Ç—å –¥–µ–≤–æ—á–∫—É')
def send_girl_photo(message):
    user_id = message.from_user.id
    current_time = datetime.now()
    if user_id in user_cooldowns and (current_time - user_cooldowns[user_id]) < cooldown_time:
        time_remaining = cooldown_time - (current_time - user_cooldowns[user_id])
        minutes, seconds = divmod(time_remaining.seconds, 60)
        time_str = f"‚è≥ {minutes}–º. {seconds}—Å."
        bot.send_message(message.chat.id,
                         f"üÉèüôÖ‚Äç‚ôÇÔ∏è {message.from_user.first_name}, –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥. "
                         f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑:\n"
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         f"   {time_str}", disable_notification=True)
    else:
        user_cooldowns[user_id] = current_time
        card_name = choose_card()  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        card_info = get_card_info(card_name)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
        if card_info:
            chosen_card = card_info['name']
            description = (f"<b>‚ù§Ô∏è‚Äçüî• {chosen_card}</b>\n"
                           f"\n<i>üî• –†–µ–¥–∫–æ—Å—Ç—å:</i> {card_info['rarity']}\n"
                           f"<i>ü•µ –°–∏–ª–∞ –æ—Ä–≥–∞–∑–º–∞:</i> {card_info['orgasm_power']}\n"
                           f"<i>üí® –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:</i> {card_info['stamina']}\n"
                           f"\nüí† <b>–¶–µ–Ω–Ω–æ—Å—Ç—å:</b> {card_info['value']} pt")
            photo_path = None
            if chosen_card == '–Ø–º–∞—Ç–æ':
                photo_path = r'C:\Users\ip301\Documents\Lightshot\yamato.jpg'
            elif chosen_card == '–õ—É—Ñ—Ñ–∏':
                photo_path = r'C:\Users\ip301\Documents\Lightshot\luffy.jpg'

            if photo_path:
                try:
                    with open(photo_path, 'rb') as photo:
                        bot.send_photo(message.chat.id, photo, caption=description, parse_mode='HTML',
                                       disable_notification=True)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            else:
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {chosen_card} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


cards = [
    {'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', 'chance': 0.01},
    {'name': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'chance': 0.07},  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 7%
    {'name': '–≠–ø–∏—á–µ—Å–∫–∞—è', 'chance': 0.18},    # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 18%
    {'name': '–†–µ–¥–∫–∞—è', 'chance': 0.29},      # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 29%
    {'name': '–û–±—ã—á–Ω–∞—è', 'chance': 0.45},    # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 45%
    {'name': '–Ø–º–∞—Ç–æ', 'chance': 0.07},
    {'name': '–õ—É—Ñ—Ñ–∏', 'chance': 0.01},  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã "–õ—É—Ñ—Ñ–∏" —Å —à–∞–Ω—Å–æ–º 7%
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def choose_card():
    rand_num = random.random()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
    cumulative_chance = 0  # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

    for card in cards:
        cumulative_chance += card['chance']  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        if rand_num < cumulative_chance:  # –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            return card['name']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∫–∞—Ä—Ç—ã


if __name__ == "__main__":
    create_users_table()
    bot.polling(none_stop=True)
